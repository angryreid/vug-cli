#!/usr/bin/env node

var log            	= console.log;
var fs             	= require('fs');
var path           	= require('path');
var glob           	= require("glob");
var inquirer       	= require("inquirer");
var _ 				= require('lodash');

var spawn          	= require('child_process').spawn;

var cur_path 		= process.cwd();

console.log(cur_path);

var utils = {
	getFullPath:(file_path_without_ext, ext)=>{
		return `${file_path_without_ext}${ext}`;
	}
}

var funs = {
	// 新建路由
	createRouter:function(){
		var options = {};
		function chooseTemplate(){
			return new Promise((resolve, reject) => {
				console.log('正在拉取可用模板...')

				var template_list = fs.readdirSync(path.resolve(__dirname, '../template/templates'))

				var questions = {
				    type: 'list',
				    name: 'template',
				    message: '请选择可用模板\n',
				    choices:template_list
				};
				inquirer.prompt(questions).then(function (answers) {
					resolve(_.merge(options, {template: answers.template}));
				});
			});	
		}

		function getPath(options){
			return new Promise((resolve, reject) => {
				var questions = [{
				    type: 'input',
				    name: 'path',
				    message: '请输路由路径，如：/user/add  (无需 .html 结尾)\n',
				    validate: function (value) {
				    	if(!/^\//gi.test(value)){
							return '请以 / 开头';
				    	}
				    	if(/\/$/gi.test(value)){
							return '不能以 / 结尾';
				    	}
				    	if(/\.html$/gi.test(value)){
							return '不能以 .html 结尾';
				    	}
				      return true;
				    }
				  }
				];
				inquirer.prompt(questions).then(function (answers) {
					resolve(_.merge(options, {path:answers.path}));
				});
			});
		}

		function checkExist(options){
			return new Promise((resolve, reject) => { 
				var file_path = path.resolve(cur_path, `./src/pages${options.path}`);
				var entryPath = utils.getFullPath(file_path, '.entry.js');
				var vuePath = utils.getFullPath(file_path, '.vue');
				var configPath = utils.getFullPath(file_path, '.json');

				if(fs.existsSync(entryPath)){
					reject(`${entryPath} 文件已存在`);
				}
				if(fs.existsSync(vuePath)){
					reject(`${vuePath} 文件已存在`);
				}
				if(fs.existsSync(configPath)){
					reject(`${configPath} 文件已存在`);
				}
				resolve(_.merge(options, {
					entryPath,
					vuePath,
					configPath
				}));
			});
		}

		function confirm(options){
			return new Promise((resolve, reject) => {
				var message = [
					'系统将创建以下文件：',
					'    (1)  ' + options.entryPath,
					'    (2)  ' + options.vuePath,
					'    (3)  ' + options.configPath,
					'',
					'是否继续 ？'
				].join('\n');
				var questions = [{
				    type: 'confirm',
				    name: 'isDo',
				    message:message,
				    default:true
				  }
				];
				inquirer.prompt(questions).then(function (answers) {
					if(answers.isDo){
						resolve(options);
					}else{
						reject('文件创建终止 ！')
					}
				});

			});			
		}

		function create(options){
			return new Promise((resolve, reject) => {
				var parents =  options.entryPath.replace('./src/pages/','').substr(1).split('/').length;
				if(!parents){
					parents = './';
				}else{
					parents = '../'.repeat(parents);
				}
 
				var entryPath       = options.entryPath;
				var vuePath         = options.vuePath;
				var configPath      = options.configPath;

				var dir             = entryPath.substring(0,entryPath.lastIndexOf('/'))
				var entryName       = entryPath.substr(entryPath.lastIndexOf('/')+1);

				entryName           = entryName.substring(0,entryName.indexOf('.'));


				var entryFileContent = fs.readFileSync(path.resolve(__dirname, '../template/templates/', `${options.template}/template.entry.js`), 'utf8').toString()
					.replace(/{name}/gi,entryName)
					.replace(/{parents}/gi,parents);

				var vueFileContent   = fs.readFileSync(path.resolve(__dirname, '../template/templates/', `${options.template}/template.vue`), 'utf8').toString()
					.replace(/{path}/gi,vuePath)
					.replace(/{parents}/gi,parents);

				var configFileContent   = fs.readFileSync(path.resolve(__dirname, '../template/templates/', `${options.template}/config.json`), 'utf8').toString()

				spawn('mkdir', ['-p',dir]).on('exit',function(){
					try{
						fs.writeFileSync(entryPath,entryFileContent);
						fs.writeFileSync(vuePath,vueFileContent);
						fs.writeFileSync(configPath, configFileContent);
						resolve();
					}catch(e){
						reject(e.toString())
					}
				});
			});
		}
		chooseTemplate()
			.then(getPath)
			.then(checkExist)
			.then(confirm)
			.then(create)
			.then(function(){
				log('\n文件已生成。')
				var questions = [{
				    type: 'confirm',
				    name: 'startDev',
				    message:'是否启动开发服务器'
				  }
				];
				inquirer.prompt(questions).then(function (answers) {
					if(answers.startDev){
						funs.startDev();
					}
				});
			})
			.catch(e=>log(e))
	},


	// 启动开发服务器
	startDev:function(){
		spawn('webpack-dev-server', { stdio:'inherit' }); 
	},

	askIfStartDev: function(){
		var questions = [{
		    type: 'confirm',
		    name: 'startDev',
		    message:'是否启动开发服务器'
		  }
		];
		inquirer.prompt(questions).then(function (answers) {
			if(answers.startDev){
				funs.startDev();
			}
		});
	},

	// 编译
	build:function(){
		var loader = [
		  '/ building .',
		  '| building ..',
		  '\\ building ...',
		  '- building ....'
		];
		var i = 4;
		var ui = new inquirer.ui.BottomBar({bottomBar: loader[i % 4]});
		var timer = setInterval(function () {
			ui.updateBottomBar(loader[i++ % 4]);
		}, 200);

		var d = Date.now();
		var webpack = spawn('webpack',['-build']);

		webpack.on('close',function(code){
			if(code == 0){
				log('编译完成 ！' + ('耗时：' + ( (Date.now()-d))/1000 )+'秒' ) ;
				clearTimeout(timer);

				var questions = [{
					type: 'confirm',
					name: 'startDev',
					message:'是否要提交代码'
				}
				];
				inquirer.prompt(questions).then(function (answers) {
					if(answers.startDev){
						funs.submit();
					}else{
						process.exit();
					}
				});
			}else{
				console.log(`编译错误: ${code}`);
				log('发生错误' + err);
				clearTimeout(timer);
			}
		});
	},

	// 重建全部入口文件
	reCreateEntry(){
		var configs          = glob.sync(path.resolve(cur_path, "./src/pages/**/*.json"));
		var entrys           = glob.sync(path.resolve(cur_path, "./src/pages/**/*.entry.js"));
		var options			 = {};
		var entryName        = '';
		var entryPath 	     = '';
		var entryFileContent = '';
		var entry_template   = '';
		var parents          = '';

		configs.forEach(config=>{
			template  			= JSON.parse(fs.readFileSync(config, 'utf8').toString()).template;

			parents         	= config.replace('./src/pages/','').substr(1).split('/').length;
			console.log(parents);
			parents         	= parents?'../'.repeat(parents):'./';
			console.log(parents);
			entryName       	= config.substr(config.lastIndexOf('/')+1);
			entryName       	= entryName.substring(0,entryName.indexOf('.'));

			entryPath   		= path.resolve(config, '..', utils.getFullPath(entryName, '.entry.js'));
			
			template_entryPath	= path.resolve(__dirname, '..', `template/templates/${template}/template.entry.js`);
			
			options 			= {
				template:template,
				entryPath:entryPath
			};

			entryFileContent = fs.readFileSync(template_entryPath, 'utf8').toString().replace(/{name}/gi,entryName).replace(/{parents}/gi,parents);
			
			fs.writeFileSync(entryPath,entryFileContent);
		});
		log('重建完成 ！ ')
		funs.askIfStartDev();
	},

	// 提交代码
	submit(){
		var free  = spawn('git',['status'],{ stdio:'inherit' }); 
		free.on('exit',function(){
			var questions = [{
				    type: 'confirm',
				    name: 'isDo',
				    message:'\n确定提交以上文件吗？'
				  }
				];
				inquirer.prompt(questions).then(function (answers) {
					if(answers.isDo){
						questions = [{
						    type: 'input',
						    name: 'des',
						    message:'请输入 commit 信息: ',
	    				    validate: function (value) {
						    	if(!value.trim()){
									return 'commit 信息不能为空';
						    	}
							    return true;
						    }
						  }
						];
						inquirer.prompt(questions).then(function (answers) {
							require('child_process').exec(`git add -A . ; git commit -m '${answers.des}' ; git push;`).on('exit',function(){
								log('提交完成！')
							});
						});
					}
				});
		});
	},

	// 生成 html 文件，html 文件，都使用本地开发服务器路径
	createHTML(){
		var glob   = require("glob");
		var entrys = glob.sync(path.resolve(cur_path, "./src/pages/**/*.entry.js"));
		var rf     = require("fs");  
		var data   = rf.readFileSync(path.resolve(cur_path, "./src/templates/page_template.html","utf-8"));
		var tasks  = entrys.map(i=>{
			return new Promise((resolve, reject) => {
				var scripts;
				var jsFile;
				var savePath =  i.replace('./src/pages/','./dist/').replace('.entry.js','.html');
					jsFile   = i.replace('./src/pages/','').replace('.entry.js','.js');
					scripts  = `
						<script src="/static/libs/dist/libs.js" type="text/javascript"></script>
						<script src='http://localhost:8080/common.js'></script>
						<script src='http://localhost:8080/${jsFile}'></script>
					</body>
					</html>`;
					var fileContents = data.replace(/<!--buildjs-->(.|\n)*/gi,scripts);
					spawn('mkdir', ['-p',savePath.substring(0,savePath.lastIndexOf('/'))  ]).on('exit',()=>{
						rf.writeFileSync(savePath,fileContents);
						resolve();
					});
			});
		});
		Promise.all(tasks).then(()=>{
			log('全部 html 已生成，记得发布使用 build all 功能啊。')
			funs.askIfStartDev();
		});
	}
}


console.log('\n\n\n\n');
var menus = [
	{text:'1. 启动开发服务器',		fun:funs.startDev},
	{text:'2. 新建路由',			fun:funs.createRouter},
	{text:'3. 使用调试模式（使用本地js文件,接口读取后端数据）',fun:funs.createHTML},
	{text:'4. 编译并发布',		fun:funs.build},
	// {text:'4. 编译 - one',		fun:funs.buildOne},
	{text:'5. 重建全部入口文件',	fun:funs.reCreateEntry},
	{text:'6. 提交代码',			fun:funs.submit}
];


inquirer.prompt([{
	type: 'list',
	name: 'menu',
	message: 'QBS 命令行工具。',
	choices: menus.map(i=>i.text)
}]).then(function(answers) {
	var fun = menus.find(i=>i.text==answers.menu).fun;
	if(fun){
		fun();
	}else{
		log('功能还未实现 ')
	}
});